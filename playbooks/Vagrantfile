VAGRANTFILE_API_VERSION = "2"

def fail_with_message(msg)
  fail Vagrant::Errors::VagrantError.new, msg
end

servers=[
  {
    :hostname => "master",
    :ip => "192.168.120.10",
    :box => "ubuntu/xenial64",
    :ram => 1024,
    :cpu => 2
  },
  {
    :hostname => "worker1",
    :ip => "192.168.120.11",
    :box => "ubuntu/xenial64",
    :ram => 512,
    :cpu => 1
  },
  {
    :hostname => "worker2",
    :ip => "192.168.120.12",
    :box => "ubuntu/xenial64",
    :ram => 512,
    :cpu => 1
  },
  {
    :hostname => "testbuntu1",
    :ip => "192.168.151.111",
    :box => "ubuntu/xenial64",
    :ram => 512,
    :cpu => 1
  },
  {
    :hostname => "testbuntu2",
    :ip => "192.168.152.111",
    :box => "ubuntu/xenial64",
    :ram => 512,
    :cpu => 1
  }
]

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  if !Vagrant.has_plugin? 'vagrant-vbguest'
    fail_with_message "vagrant-vbguest missing, please install the plugin by running:\nvagrant plugin install vagrant-vbguest"
    #puts 'vagrant-vbguest missing, please install the plugin:'
    #puts 'vagrant plugin install vagrant-vbguest'
  end
  if !Vagrant.has_plugin? 'vagrant-bindfs'
    fail_with_message "vagrant-bindfs missing, please install the plugin with this command:\nvagrant plugin install vagrant-bindfs"
  end
  #config.vbguest.auto_update = true
  servers.each_with_index do |machine, index|
    config.vm.define machine[:hostname] do |node|
      node.vm.box = machine[:box]
      node.vm.hostname = machine[:hostname]
      if machine[:hostname].include? "worker" or machine[:hostname].include? "master"
        config.vm.provision "shell", inline: "sudo apt update -y && sudo apt-get install nfs-common -y"
        config.vm.synced_folder "../nfs/nfsshare", "/nfsshare", type: 'nfs', nfs_version: '3'
      end
      node.vm.network "private_network", ip: machine[:ip]
      node.ssh.insert_key = false
      node.vm.provider "virtualbox" do |vb|
        vb.customize ["modifyvm", :id, "--memory", machine[:ram]]          
      end
    end
    #if index == servers.size-1
    #  config.vm.provision :ansible do |ansible|
    #    ansible.limit = "all"
    #    ansible.playbook = "playbook.yml"
    #    ansible.inventory_path = "inventory"
    #  end
    #end
  end
end

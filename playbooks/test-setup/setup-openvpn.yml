---

- hosts: docker_swarm_manager
  become: True
  serial: 1
  vars:
    - first_vpn_subnet: '192.168.200.0/24'
    - openvpn_port: '1194'
    - istest: 'true'
  tasks:
    - name: OPENVPN | set primary master as fact
      tags:
        - nfsserver
      set_fact:
        docker_swarm_primary_manager_name: "{{ groups['docker_swarm_manager'] | first }}"
        docker_swarm_first_worker_name: "{{ groups['docker_swarm_manager'] | first }}"

    - name: OPENVPN | Install pip
      package:
        name:
          - python3-pip

    - name: OPENVPN | Install docker using pip
      pip:
        name:
          - docker
        state: latest

    - name: OPENVPN | setting up nfs server on master
      tags:
        - nfsserver
      docker_container:
        name: nfs
        image: mohitsharma44/nfsserver-alpine:latest
        volumes:
          - /nfsshare:/nfsshare
        ports:
          - "2049:2049"
        env:
          SHARED_DIRECTORY: "/nfsshare"
        privileged: yes
        recreate: yes
        restart: yes
      when:
        # Run this only on primary swarm manager
        - inventory_hostname == docker_swarm_primary_manager_name
        - not (istest | bool)

    - stat:
        path: /nfsshare/openvpn.conf
      register: openvpn_template_file

    - name: OPENVPN | Generate openvpn configuration template if it does not exist
      docker_container:
        name: openvpn_genconfig
        image: kylemanna/openvpn
        volumes:
          - /nfsshare:/etc/openvpn
        command: "ovpn_genconfig -u udp://worker.local -s {{ first_vpn_subnet }}"
        recreate: no
        restart: no
      when:
        - inventory_hostname == docker_swarm_primary_manager_name
        - istest | bool
        - not openvpn_template_file.stat.exists

    - include: openvpn-generate-multiple-server-conf.yml openvpn_server="{{ item }}" index="{{ ind }}" vpn_subnet="{{ first_vpn_subnet }}"
      loop: "{{ groups['docker_swarm_worker'] }}"
      #loop: "{{ groups['docker_swarm_worker'] | zip_longest([], fillvalue='.local') | map('join') | list }}"
      loop_control:
        index_var: ind
      when:
        - inventory_hostname == docker_swarm_primary_manager_name
        - istest | bool

    #- name: OPENVPN | Generate openvpn configuration if it does not exist
    #  docker_container:
    #    name: openvpn_genconfig
    #    image: kylemanna/openvpn
    #    volumes:
    #      - /nfsshare:/etc/openvpn
    #    # IP address subnet ranges from 192.168.200.0/24 depending on number of workers
    #    command: "ovpn_genconfig -u udp://{{ item }}.local -s 192.168.2{{ '%02d' | format(ind|int) }}.0/24"
    #    #command: "ovpn_genconfig -u udp://{{ item }}.local -s 192.168.200.0/24"
    #    recreate: no
    #    restart: no
    #    #log_driver: none
    #  loop: "{{ groups['docker_swarm_worker'] | flatten(levels=1)}}"
    #  loop_control:
    #    index_var: ind
    #  when:
    #    - inventory_hostname == docker_swarm_primary_manager_name
    #    - istest | bool

    - name: OPENVPN | Initialize the public key infrastructure
      docker_container:
        name: openvpn_pki
        image: kylemanna/openvpn
        volumes:
          - /nfsshare:/etc/openvpn
        env:
          EASYRSA_BATCH: "1"
          EASYRSA_REQ_CN: "TESTCA"
        command: "ovpn_initpki nopass"
      when:
        - inventory_hostname == docker_swarm_primary_manager_name
        - istest | bool

    - name: OPENVPN | Waiting for Public Key Infrastructure container to finish
      #shell: docker ps -a -f name=openvpn_pki --format {%raw%}"table {{.Status}}"{%endraw%} | awk 'FNR == 2 {print}' | awk '{print $1}'
      #until: pkistatus.stdout.find('Exited') != -1
      shell: docker inspect -f {%raw%}"{{.State.Running}}"{%endraw%} openvpn_pki
      register: pkistatus
      until: pkistatus.stdout.find('false') != -1
      retries: 30
      delay: 10
      ignore_errors: yes

    - name: OPENVPN | Generate the keys for testbuntus
      docker_container:
        name: openvpn_keygen
        image: kylemanna/openvpn
        volumes:
          - /nfsshare:/etc/openvpn
        command: "easyrsa build-client-full {{ item }} nopass"
      with_items:
        - "{{ groups['testbuntus'] }}"
      when:
        - inventory_hostname == docker_swarm_primary_manager_name
        - istest | bool

    - name: OPENVPN | Create client directory if it doesn\'t exist
      file:
        path: "/nfsshare/clients"
        state: directory
      when:
        - inventory_hostname == docker_swarm_primary_manager_name

    - name: OPENVPN | Waiting for testbuntu keys to be generated
      shell: docker inspect -f {%raw%}"{{.State.Running}}"{%endraw%} openvpn_keygen
      register: keygenstatus
      until: keygenstatus.stdout.find('false') != -1
      retries: 10
      delay: 10

    - name: OPENVPN | Obtain the Client certificates
      docker_container:
        name: openvpn_getclient
        image: kylemanna/openvpn
        volumes:
          - /nfsshare:/etc/openvpn
        command: ovpn_getclient {{ item }}
        detach: no
        tty: yes
        interactive: yes
      with_items:
        - "{{ groups['testbuntus'] }}"
      when:
        - inventory_hostname == docker_swarm_primary_manager_name
        - istest | bool
      register: client_certs

    - name: OPENVPN | Writing keys to file
      copy:
        content: "{{ item.ansible_facts.docker_container.Output }}"
        dest: "/nfsshare/clients/{{item._ansible_item_label}}.ovpn"
      loop: "{{ client_certs.results | flatten(levels=1) }}"
      loop_control:
        index_var: ind
      when:
        - inventory_hostname == docker_swarm_primary_manager_name
        - istest | bool

    - include: openvpn-generate-multiple-client-conf.yml openvpn_client="{{ client_item._ansible_item_label }}" vpn_port="{{ openvpn_port }}" openvpn_servers="{{ groups['docker_swarm_worker'] }}"
      loop: "{{ client_certs.results | flatten(levels=1) }}"
      loop_control:
        loop_var: client_item
        index_var: ind
      when:
        - inventory_hostname == docker_swarm_primary_manager_name
        - istest | bool

- hosts: all
  become: True
  tasks:
  - name: OPENVPNSERVER | Starting VPN Servers
    docker_container:
      name: vpn-server
      image: kylemanna/openvpn
      command: "ovpn_run --config /etc/openvpn/{{ inventory_hostname }}.conf"
      volumes:
        - /nfsshare:/etc/openvpn
      ports:
        - "1194:1194"
      privileged: yes
      recreate: yes
      restart: yes
    when:
      - inventory_hostname in groups['docker_swarm_worker']
